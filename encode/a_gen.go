package encode

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Student) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BirthDay":
			z.BirthDay, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "BirthDay")
				return
			}
		case "Phone":
			z.Phone, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Phone")
				return
			}
		case "Siblings":
			z.Siblings, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Siblings")
				return
			}
		case "Spouse":
			z.Spouse, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Spouse")
				return
			}
		case "Money":
			z.Money, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Money")
				return
			}
		case "Tags":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "Aliases":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Aliases")
				return
			}
			if cap(z.Aliases) >= int(zb0003) {
				z.Aliases = (z.Aliases)[:zb0003]
			} else {
				z.Aliases = make([]string, zb0003)
			}
			for za0003 := range z.Aliases {
				z.Aliases[za0003], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Aliases", za0003)
					return
				}
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Age":
			z.Age, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "Address":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
			if cap(z.Address) >= int(zb0004) {
				z.Address = (z.Address)[:zb0004]
			} else {
				z.Address = make([]string, zb0004)
			}
			for za0004 := range z.Address {
				z.Address[za0004], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Address", za0004)
					return
				}
			}
		case "Data":
			z.Data, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "Ssid":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Ssid")
				return
			}
			if cap(z.Ssid) >= int(zb0005) {
				z.Ssid = (z.Ssid)[:zb0005]
			} else {
				z.Ssid = make([]uint32, zb0005)
			}
			for za0005 := range z.Ssid {
				z.Ssid[za0005], err = dc.ReadUint32()
				if err != nil {
					err = msgp.WrapError(err, "Ssid", za0005)
					return
				}
			}
		case "Stu":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Stu")
					return
				}
				z.Stu = nil
			} else {
				if z.Stu == nil {
					z.Stu = new(Student1)
				}
				err = z.Stu.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Stu")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Student) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 14
	// write "BirthDay"
	err = en.Append(0x8e, 0xa8, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteTime(z.BirthDay)
	if err != nil {
		err = msgp.WrapError(err, "BirthDay")
		return
	}
	// write "Phone"
	err = en.Append(0xa5, 0x50, 0x68, 0x6f, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Phone)
	if err != nil {
		err = msgp.WrapError(err, "Phone")
		return
	}
	// write "Siblings"
	err = en.Append(0xa8, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Siblings)
	if err != nil {
		err = msgp.WrapError(err, "Siblings")
		return
	}
	// write "Spouse"
	err = en.Append(0xa6, 0x53, 0x70, 0x6f, 0x75, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Spouse)
	if err != nil {
		err = msgp.WrapError(err, "Spouse")
		return
	}
	// write "Money"
	err = en.Append(0xa5, 0x4d, 0x6f, 0x6e, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Money)
	if err != nil {
		err = msgp.WrapError(err, "Money")
		return
	}
	// write "Tags"
	err = en.Append(0xa4, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0001, za0002 := range z.Tags {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Tags")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0001)
			return
		}
	}
	// write "Aliases"
	err = en.Append(0xa7, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Aliases)))
	if err != nil {
		err = msgp.WrapError(err, "Aliases")
		return
	}
	for za0003 := range z.Aliases {
		err = en.WriteString(z.Aliases[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Aliases", za0003)
			return
		}
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Age"
	err = en.Append(0xa3, 0x41, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Address)))
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	for za0004 := range z.Address {
		err = en.WriteString(z.Address[za0004])
		if err != nil {
			err = msgp.WrapError(err, "Address", za0004)
			return
		}
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "Payload"
	err = en.Append(0xa7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "Ssid"
	err = en.Append(0xa4, 0x53, 0x73, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Ssid)))
	if err != nil {
		err = msgp.WrapError(err, "Ssid")
		return
	}
	for za0005 := range z.Ssid {
		err = en.WriteUint32(z.Ssid[za0005])
		if err != nil {
			err = msgp.WrapError(err, "Ssid", za0005)
			return
		}
	}
	// write "Stu"
	err = en.Append(0xa3, 0x53, 0x74, 0x75)
	if err != nil {
		return
	}
	if z.Stu == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Stu.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Stu")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Student) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 14
	// string "BirthDay"
	o = append(o, 0x8e, 0xa8, 0x42, 0x69, 0x72, 0x74, 0x68, 0x44, 0x61, 0x79)
	o = msgp.AppendTime(o, z.BirthDay)
	// string "Phone"
	o = append(o, 0xa5, 0x50, 0x68, 0x6f, 0x6e, 0x65)
	o = msgp.AppendString(o, z.Phone)
	// string "Siblings"
	o = append(o, 0xa8, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x73)
	o = msgp.AppendInt(o, z.Siblings)
	// string "Spouse"
	o = append(o, 0xa6, 0x53, 0x70, 0x6f, 0x75, 0x73, 0x65)
	o = msgp.AppendBool(o, z.Spouse)
	// string "Money"
	o = append(o, 0xa5, 0x4d, 0x6f, 0x6e, 0x65, 0x79)
	o = msgp.AppendFloat64(o, z.Money)
	// string "Tags"
	o = append(o, 0xa4, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Tags)))
	for za0001, za0002 := range z.Tags {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "Aliases"
	o = append(o, 0xa7, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Aliases)))
	for za0003 := range z.Aliases {
		o = msgp.AppendString(o, z.Aliases[za0003])
	}
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Age"
	o = append(o, 0xa3, 0x41, 0x67, 0x65)
	o = msgp.AppendUint8(o, z.Age)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Address)))
	for za0004 := range z.Address {
		o = msgp.AppendString(o, z.Address[za0004])
	}
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendString(o, z.Data)
	// string "Payload"
	o = append(o, 0xa7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "Ssid"
	o = append(o, 0xa4, 0x53, 0x73, 0x69, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Ssid)))
	for za0005 := range z.Ssid {
		o = msgp.AppendUint32(o, z.Ssid[za0005])
	}
	// string "Stu"
	o = append(o, 0xa3, 0x53, 0x74, 0x75)
	if z.Stu == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Stu.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Stu")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Student) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BirthDay":
			z.BirthDay, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BirthDay")
				return
			}
		case "Phone":
			z.Phone, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Phone")
				return
			}
		case "Siblings":
			z.Siblings, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Siblings")
				return
			}
		case "Spouse":
			z.Spouse, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Spouse")
				return
			}
		case "Money":
			z.Money, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Money")
				return
			}
		case "Tags":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if z.Tags == nil {
				z.Tags = make(map[string]string, zb0002)
			} else if len(z.Tags) > 0 {
				for key := range z.Tags {
					delete(z.Tags, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0001)
					return
				}
				z.Tags[za0001] = za0002
			}
		case "Aliases":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Aliases")
				return
			}
			if cap(z.Aliases) >= int(zb0003) {
				z.Aliases = (z.Aliases)[:zb0003]
			} else {
				z.Aliases = make([]string, zb0003)
			}
			for za0003 := range z.Aliases {
				z.Aliases[za0003], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Aliases", za0003)
					return
				}
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Age":
			z.Age, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "Address":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
			if cap(z.Address) >= int(zb0004) {
				z.Address = (z.Address)[:zb0004]
			} else {
				z.Address = make([]string, zb0004)
			}
			for za0004 := range z.Address {
				z.Address[za0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Address", za0004)
					return
				}
			}
		case "Data":
			z.Data, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "Payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "Ssid":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ssid")
				return
			}
			if cap(z.Ssid) >= int(zb0005) {
				z.Ssid = (z.Ssid)[:zb0005]
			} else {
				z.Ssid = make([]uint32, zb0005)
			}
			for za0005 := range z.Ssid {
				z.Ssid[za0005], bts, err = msgp.ReadUint32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Ssid", za0005)
					return
				}
			}
		case "Stu":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Stu = nil
			} else {
				if z.Stu == nil {
					z.Stu = new(Student1)
				}
				bts, err = z.Stu.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Stu")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Student) Msgsize() (s int) {
	s = 1 + 9 + msgp.TimeSize + 6 + msgp.StringPrefixSize + len(z.Phone) + 9 + msgp.IntSize + 7 + msgp.BoolSize + 6 + msgp.Float64Size + 5 + msgp.MapHeaderSize
	if z.Tags != nil {
		for za0001, za0002 := range z.Tags {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0003 := range z.Aliases {
		s += msgp.StringPrefixSize + len(z.Aliases[za0003])
	}
	s += 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.Uint8Size + 8 + msgp.ArrayHeaderSize
	for za0004 := range z.Address {
		s += msgp.StringPrefixSize + len(z.Address[za0004])
	}
	s += 5 + msgp.StringPrefixSize + len(z.Data) + 8 + msgp.BytesPrefixSize + len(z.Payload) + 5 + msgp.ArrayHeaderSize + (len(z.Ssid) * (msgp.Uint32Size)) + 4
	if z.Stu == nil {
		s += msgp.NilSize
	} else {
		s += z.Stu.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Student1) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Age":
			z.Age, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "Address":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
			if cap(z.Address) >= int(zb0002) {
				z.Address = (z.Address)[:zb0002]
			} else {
				z.Address = make([]string, zb0002)
			}
			for za0001 := range z.Address {
				z.Address[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Address", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Student1) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Name"
	err = en.Append(0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Age"
	err = en.Append(0xa3, 0x41, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.Age)
	if err != nil {
		err = msgp.WrapError(err, "Age")
		return
	}
	// write "Address"
	err = en.Append(0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Address)))
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	for za0001 := range z.Address {
		err = en.WriteString(z.Address[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Address", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Student1) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Name"
	o = append(o, 0x83, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Age"
	o = append(o, 0xa3, 0x41, 0x67, 0x65)
	o = msgp.AppendUint8(o, z.Age)
	// string "Address"
	o = append(o, 0xa7, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Address)))
	for za0001 := range z.Address {
		o = msgp.AppendString(o, z.Address[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Student1) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Age":
			z.Age, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Age")
				return
			}
		case "Address":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Address")
				return
			}
			if cap(z.Address) >= int(zb0002) {
				z.Address = (z.Address)[:zb0002]
			} else {
				z.Address = make([]string, zb0002)
			}
			for za0001 := range z.Address {
				z.Address[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Address", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Student1) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 4 + msgp.Uint8Size + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Address {
		s += msgp.StringPrefixSize + len(z.Address[za0001])
	}
	return
}
