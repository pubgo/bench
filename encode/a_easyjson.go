// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package encode

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6fdb3c5bDecodeGithubComPubgoBenchEncode(in *jlexer.Lexer, out *Student1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Age":
			out.Age = uint8(in.Uint8())
		case "Address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				in.Delim('[')
				if out.Address == nil {
					if !in.IsDelim(']') {
						out.Address = make([]string, 0, 4)
					} else {
						out.Address = []string{}
					}
				} else {
					out.Address = (out.Address)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Address = append(out.Address, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fdb3c5bEncodeGithubComPubgoBenchEncode(out *jwriter.Writer, in Student1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Age))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		if in.Address == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Address {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Student1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6fdb3c5bEncodeGithubComPubgoBenchEncode(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Student1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6fdb3c5bEncodeGithubComPubgoBenchEncode(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Student1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6fdb3c5bDecodeGithubComPubgoBenchEncode(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Student1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6fdb3c5bDecodeGithubComPubgoBenchEncode(l, v)
}
func easyjson6fdb3c5bDecodeGithubComPubgoBenchEncode1(in *jlexer.Lexer, out *Student) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "BirthDay":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.BirthDay).UnmarshalJSON(data))
			}
		case "Phone":
			out.Phone = string(in.String())
		case "Siblings":
			out.Siblings = int(in.Int())
		case "Spouse":
			out.Spouse = bool(in.Bool())
		case "Money":
			out.Money = float64(in.Float64())
		case "Tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Tags = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Tags)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "Payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				out.Payload = in.Bytes()
			}
		case "Stu":
			if in.IsNull() {
				in.Skip()
				out.Stu = nil
			} else {
				if out.Stu == nil {
					out.Stu = new(Student1)
				}
				(*out.Stu).UnmarshalEasyJSON(in)
			}
		case "Aliases":
			if in.IsNull() {
				in.Skip()
				out.Aliases = nil
			} else {
				in.Delim('[')
				if out.Aliases == nil {
					if !in.IsDelim(']') {
						out.Aliases = make([]string, 0, 4)
					} else {
						out.Aliases = []string{}
					}
				} else {
					out.Aliases = (out.Aliases)[:0]
				}
				for !in.IsDelim(']') {
					var v6 string
					v6 = string(in.String())
					out.Aliases = append(out.Aliases, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Name":
			out.Name = string(in.String())
		case "Age":
			out.Age = uint8(in.Uint8())
		case "Address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				in.Delim('[')
				if out.Address == nil {
					if !in.IsDelim(']') {
						out.Address = make([]string, 0, 4)
					} else {
						out.Address = []string{}
					}
				} else {
					out.Address = (out.Address)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Address = append(out.Address, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Data":
			out.Data = string(in.String())
		case "Ssid":
			if in.IsNull() {
				in.Skip()
				out.Ssid = nil
			} else {
				in.Delim('[')
				if out.Ssid == nil {
					if !in.IsDelim(']') {
						out.Ssid = make([]uint32, 0, 16)
					} else {
						out.Ssid = []uint32{}
					}
				} else {
					out.Ssid = (out.Ssid)[:0]
				}
				for !in.IsDelim(']') {
					var v8 uint32
					v8 = uint32(in.Uint32())
					out.Ssid = append(out.Ssid, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6fdb3c5bEncodeGithubComPubgoBenchEncode1(out *jwriter.Writer, in Student) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"BirthDay\":"
		out.RawString(prefix[1:])
		out.Raw((in.BirthDay).MarshalJSON())
	}
	{
		const prefix string = ",\"Phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"Siblings\":"
		out.RawString(prefix)
		out.Int(int(in.Siblings))
	}
	{
		const prefix string = ",\"Spouse\":"
		out.RawString(prefix)
		out.Bool(bool(in.Spouse))
	}
	{
		const prefix string = ",\"Money\":"
		out.RawString(prefix)
		out.Float64(float64(in.Money))
	}
	{
		const prefix string = ",\"Tags\":"
		out.RawString(prefix)
		if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Tags {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"Payload\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Payload)
	}
	{
		const prefix string = ",\"Stu\":"
		out.RawString(prefix)
		if in.Stu == nil {
			out.RawString("null")
		} else {
			(*in.Stu).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Aliases\":"
		out.RawString(prefix)
		if in.Aliases == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Aliases {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Age\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Age))
	}
	{
		const prefix string = ",\"Address\":"
		out.RawString(prefix)
		if in.Address == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Address {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix)
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"Ssid\":"
		out.RawString(prefix)
		if in.Ssid == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.Ssid {
				if v16 > 0 {
					out.RawByte(',')
				}
				out.Uint32(uint32(v17))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Student) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6fdb3c5bEncodeGithubComPubgoBenchEncode1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Student) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6fdb3c5bEncodeGithubComPubgoBenchEncode1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Student) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6fdb3c5bDecodeGithubComPubgoBenchEncode1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Student) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6fdb3c5bDecodeGithubComPubgoBenchEncode1(l, v)
}
